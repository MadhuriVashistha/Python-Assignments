{"cells":[{"cell_type":"code","source":["# Question1: Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dog that overrides the speak() method to print \"Bark!\".\n","class Animal:\n","    def speak(self):\n","        print(\"This animal makes a sound\")\n","\n","class Dog(Animal):\n","    def speak(self):\n","        print(\"Bark!\")\n","animal = Animal()\n","dog = Dog()\n","\n","# Call the speak method\n","animal.speak()\n","dog.speak()\n"],"metadata":{"id":"E45a2QclQsMH","executionInfo":{"status":"ok","timestamp":1736010248905,"user_tz":-330,"elapsed":416,"user":{"displayName":"","userId":""}},"outputId":"b5da3eb1-e5f6-4e18-d2ff-3b5475ac235c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["This animal makes a sound\n","Bark!\n"]}]},{"cell_type":"code","source":["# Question2: Write a program to create an abstract class Shape with a method area(). Derive classes Circle and Rectangle from it and implement the area() method in both.\n","from abc import ABC, abstractmethod\n","import math\n","class Shape:\n","  @abstractmethod\n","  def area(self):\n","       pass\n","\n","class circle(Shape):\n","  def __init__(self, radius):\n","      self.radius=radius\n","\n","  def area (self):\n","      return math.pi * (self.radius ** 2)\n","\n","class Rectangle(Shape):\n","   def __init__(self, length, width):\n","      self.length= length\n","      self.width= width\n","\n","   def area(self):\n","      return self.width * self.length\n","\n","Circle = circle(5)\n","rectangle = Rectangle(4, 6)\n","\n","print(f\"Area of Circle: {Circle.area()}\")\n","print(f\"Area of Rectangle: {rectangle.area()}\")\n"],"metadata":{"id":"DpUrRz7nRkJY","executionInfo":{"status":"ok","timestamp":1736010995508,"user_tz":-330,"elapsed":519,"user":{"displayName":"","userId":""}},"outputId":"1f1addf6-39a0-49f7-e83e-54d8439e9c61","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Area of Circle: 78.53981633974483\n","Area of Rectangle: 24\n"]}]},{"cell_type":"code","source":["# Question3: Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car  and further derive a class ElectricCar that adds a battery attribute.\n","class Vehicle:\n","    def __init__(self, vehicle_type):\n","        self.type = vehicle_type\n","\n","    def display_type(self):\n","        print(f\"This is a {self.type}.\")\n","\n","class Car(Vehicle):\n","    def __init__(self, vehicle_type, make, model):\n","        super().__init__(vehicle_type)\n","        self.make = make\n","        self.model = model\n","\n","    def display_info(self):\n","        print(f\"This is a {self.make} {self.model} {self.type}.\")\n","\n","class ElectricCar(Car):\n","    def __init__(self, vehicle_type, make, model, battery_capacity):\n","        super().__init__(vehicle_type, make, model)\n","        self.battery_capacity = battery_capacity\n","\n","    def display_battery_info(self):\n","        print(f\"The battery capacity of this electric car is {self.battery_capacity} kWh.\")\n","\n","# Create an instance of ElectricCar\n","electric_car = ElectricCar(\"Electric\", \"Tesla\", \"Model S\", 100)\n","\n","# Call methods to display information\n","electric_car.display_type()\n","electric_car.display_info()\n","electric_car.display_battery_info()\n"],"metadata":{"id":"S24tqSzBUaeV","executionInfo":{"status":"ok","timestamp":1736011141633,"user_tz":-330,"elapsed":417,"user":{"displayName":"","userId":""}},"outputId":"8b5ba5de-f0c8-4bb8-8ec0-cb31dbfee994","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["This is a Electric.\n","This is a Tesla Model S Electric.\n","The battery capacity of this electric car is 100 kWh.\n"]}]},{"cell_type":"code","source":["# Question4: Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car  and further derive a class ElectricCar that adds a battery attribute.\n","class Vehicle:\n","    def __init__(self, vehicle_type):\n","        self.type = vehicle_type\n","\n","    def display_type(self):\n","        print(f\"This is a {self.type}.\")\n","\n","class Car(Vehicle):\n","    def __init__(self, vehicle_type, make, model):\n","        super().__init__(vehicle_type)\n","        self.make = make\n","        self.model = model\n","\n","    def display_info(self):\n","        print(f\"This is a {self.make} {self.model} {self.type}.\")\n","\n","class ElectricCar(Car):\n","    def __init__(self, vehicle_type, make, model, battery_capacity):\n","        super().__init__(vehicle_type, make, model)\n","        self.battery_capacity = battery_capacity\n","\n","    def display_battery_info(self):\n","        print(f\"The battery capacity of this electric car is {self.battery_capacity} kWh.\")\n","\n","# Create an instance of ElectricCar\n","electric_car = ElectricCar(\"Petrol\", \"Baleno\", \"Delta AMT\", 200)\n","\n","# Call methods to display information\n","electric_car.display_type()\n","electric_car.display_info()\n","electric_car.display_battery_info()\n"],"metadata":{"id":"AcB-ZdIzU_nE","executionInfo":{"status":"ok","timestamp":1736011272193,"user_tz":-330,"elapsed":494,"user":{"displayName":"","userId":""}},"outputId":"d84f0643-866c-4f5f-c4e7-1be3d878e606","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["This is a Petrol.\n","This is a Baleno Delta AMT Petrol.\n","The battery capacity of this electric car is 200 kWh.\n"]}]},{"cell_type":"code","source":["# Question5: Write a program to demonstrate encapsulation by creating a class BankAccount with private attributes  balance and methods to deposit, withdraw, and check balance.\n","class BankAccount:\n","    def __init__(self, owner, balance=0):\n","        self.owner = owner\n","        self.__balance = balance\n","\n","    def deposit(self, amount):\n","        if amount > 0:\n","            self.__balance += amount\n","            print(f\"Deposited {amount}. New balance: {self.__balance}\")\n","        else:\n","            print(\"Deposit amount must be positive.\")\n","\n","    def withdraw(self, amount):\n","        if amount > 0:\n","            if self.__balance >= amount:\n","                self.__balance -= amount\n","                print(f\"Withdrew {amount}. New balance: {self.__balance}\")\n","            else:\n","                print(\"Insufficient funds.\")\n","        else:\n","            print(\"Withdrawal amount must be positive.\")\n","\n","    def check_balance(self):\n","        return self.__balance\n","\n","account = BankAccount(\"John\", 1000)\n","\n","account.deposit(500)\n","account.withdraw(200)\n","\n","print(f\"Balance: {account.check_balance()}\")\n"],"metadata":{"id":"LOWENVZJVdyH","executionInfo":{"status":"ok","timestamp":1736011387699,"user_tz":-330,"elapsed":409,"user":{"displayName":"","userId":""}},"outputId":"e69cd9f2-6323-4666-8121-6f2f6e928740","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Deposited 500. New balance: 1500\n","Withdrew 200. New balance: 1300\n","Balance: 1300\n"]}]},{"cell_type":"code","source":["# Question6: Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar and Piano that implement their own version of play().\n","# Base class\n","class Instrument:\n","    def play(self):\n","        print(\"Playing a generic instrument.\")\n","\n","class Guitar(Instrument):\n","    def play(self):\n","        print(\"Strumming the guitar.\")\n","\n","class Piano(Instrument):\n","    def play(self):\n","        print(\"Playing the piano.\")\n","\n","def perform_play(instrument):\n","    instrument.play()\n","\n","# Create objects of Guitar and Piano\n","guitar = Guitar()\n","piano = Piano()\n","\n","perform_play(guitar)\n","perform_play(piano)\n"],"metadata":{"id":"aTpUZCHeV5-L","executionInfo":{"status":"ok","timestamp":1736011462032,"user_tz":-330,"elapsed":411,"user":{"displayName":"","userId":""}},"outputId":"0385053e-c6c0-4f50-eb7f-39cc9a35aba4","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Strumming the guitar.\n","Playing the piano.\n"]}]},{"cell_type":"code","source":["# Question7: Create a class MathOperations with a class method add_numbers() to add two numbers and a static method subtract_numbers() to subtract two numbers.\n","class MathOperations:\n","\n","    @classmethod\n","    def add_numbers(cls, num1, num2):\n","        return num1 + num2\n","\n","    @staticmethod\n","    def subtract_numbers(num1, num2):\n","        return num1 - num2\n","\n","result_add = MathOperations.add_numbers(10, 5)\n","print(f\"Sum: {result_add}\")\n","\n","result_subtract = MathOperations.subtract_numbers(10, 5)\n","print(f\"Difference: {result_subtract}\")\n"],"metadata":{"id":"Y9i6OCoAWLzr","executionInfo":{"status":"ok","timestamp":1736011544203,"user_tz":-330,"elapsed":429,"user":{"displayName":"","userId":""}},"outputId":"559e184a-320e-4385-92ad-41b7dca2b28b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Sum: 15\n","Difference: 5\n"]}]},{"cell_type":"code","source":["# Question8: Implement a class Person with a class method to count the total number of persons created.\n","class Person:\n","    total_persons = 0\n","    def __init__(self, name, age):\n","        self.name = name\n","        self.age = age\n","        Person.total_persons += 1\n","\n","    @classmethod\n","    def count_persons(cls):\n","        return cls.total_persons\n","\n","person1 = Person(\"Alice\", 30)\n","person2 = Person(\"Bob\", 25)\n","person3 = Person(\"Charlie\", 35)\n","\n","print(f\"Total persons created: {Person.count_persons()}\")\n","\n","person4 = Person(\"David\", 28)\n","print(f\"Total persons created: {Person.count_persons()}\")\n"],"metadata":{"id":"_tlNQFmXWjpy","executionInfo":{"status":"ok","timestamp":1736011634697,"user_tz":-330,"elapsed":421,"user":{"displayName":"","userId":""}},"outputId":"b9974d58-d3e5-45f1-cf9e-d27636412d00","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Total persons created: 3\n","Total persons created: 4\n"]}]},{"cell_type":"code","source":["#Question9: Write a class Fraction with attributes numerator and denominator. Override the str method to display the fraction as \"numerator/denominator\".\n","class Fraction:\n","    def __init__(self, numerator, denominator):\n","        self.numerator = numerator\n","        self.denominator = denominator\n","\n","    def __str__(self):\n","        return f\"{self.numerator}/{self.denominator}\"\n","\n","fraction1 = Fraction(3, 4)\n","fraction2 = Fraction(5, 8)\n","\n","# Printing the fractions\n","print(fraction1)\n","print(fraction2)\n"],"metadata":{"id":"vUpa8yWTW2ay","executionInfo":{"status":"ok","timestamp":1736011717287,"user_tz":-330,"elapsed":394,"user":{"displayName":"","userId":""}},"outputId":"2611ea2b-ed09-479a-b888-b38275bb0679","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["3/4\n","5/8\n"]}]},{"cell_type":"code","source":["#Question10: Demonstrate operator overloading by creating a class Vector and overriding the add method to add two vectors.\n","class Vector:\n","    def __init__(self, x, y):\n","        self.x = x\n","        self.y = y\n","\n","    def __add__(self, other):\n","        if isinstance(other, Vector):\n","            return Vector(self.x + other.x, self.y + other.y)\n","        return NotImplemented\n","\n","    def __str__(self):\n","        return f\"({self.x}, {self.y})\"\n","\n","vector1 = Vector(2, 3)\n","vector2 = Vector(4, 5)\n","\n","result = vector1 + vector2\n","\n","# Print the result\n","print(f\"Result of addition: {result}\")"],"metadata":{"id":"KOPDYTfVXKpI","executionInfo":{"status":"ok","timestamp":1736011820751,"user_tz":-330,"elapsed":410,"user":{"displayName":"","userId":""}},"outputId":"ac50ac79-6263-4c3c-9658-b5f82403d0c3","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Result of addition: (6, 8)\n"]}]},{"cell_type":"code","source":["#Question11: Create a class Person with attributes name and age. Add a method greet() that prints \"Hello, my name is {name} and I am {age} years old.\"\n","class Person:\n","    def __init__(self, name, age):\n","        self.name = name\n","        self.age = age\n","\n","    def greet(self):\n","        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n","\n","person1 = Person(\"Alice\", 30)\n","person2 = Person(\"Bob\", 25)\n","\n","person1.greet()\n","person2.greet()\n"],"metadata":{"id":"IJk4K7yLXulD","executionInfo":{"status":"ok","timestamp":1736011929105,"user_tz":-330,"elapsed":438,"user":{"displayName":"","userId":""}},"outputId":"f71ee4cc-2c58-44a9-d9d9-1898c4325cc8","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, my name is Alice and I am 30 years old.\n","Hello, my name is Bob and I am 25 years old.\n"]}]},{"cell_type":"code","source":["class Student:\n","    def __init__(self, name, grades):\n","        self.name = name\n","        self.grades = grades\n","\n","    def average_grade(self):\n","        if len(self.grades) > 0:\n","            return sum(self.grades) / len(self.grades)\n","        else:\n","            return 0\n","\n","student1 = Student(\"Alice\", [85, 90, 78, 92])\n","student2 = Student(\"Bob\", [70, 75, 80])\n","\n","print(f\"{student1.name}'s average grade: {student1.average_grade():.2f}\")\n","print(f\"{student2.name}'s average grade: {student2.average_grade():.2f}\")\n"],"metadata":{"id":"-SKqBMo7X99e","executionInfo":{"status":"ok","timestamp":1736012028291,"user_tz":-330,"elapsed":782,"user":{"displayName":"","userId":""}},"outputId":"6fdf494f-7d0c-47fe-a4e9-02699c8089eb","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Alice's average grade: 86.25\n","Bob's average grade: 75.00\n"]}]},{"cell_type":"code","source":["#Question13:  Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the area.\n","class Rectangle:\n","    def __init__(self):\n","        self.length = 0\n","        self.width = 0\n","\n","    def set_dimensions(self, length, width):\n","        self.length = length\n","        self.width = width\n","\n","    def area(self):\n","        return self.length * self.width\n","\n","rectangle1 = Rectangle()\n","rectangle1.set_dimensions(5, 3)\n","print(f\"Area of rectangle1: {rectangle1.area()}\")\n","\n","rectangle2 = Rectangle()\n","rectangle2.set_dimensions(7, 2)\n","print(f\"Area of rectangle2: {rectangle2.area()}\")"],"metadata":{"id":"DWa_1d3IYX29","executionInfo":{"status":"ok","timestamp":1736012123252,"user_tz":-330,"elapsed":386,"user":{"displayName":"","userId":""}},"outputId":"e3379114-7160-4dfb-e617-7067ed001434","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Area of rectangle1: 15\n","Area of rectangle2: 14\n"]}]},{"cell_type":"code","source":["#Question14: Create a class Employee with a method calculate_salary() that computes the salary based on hours worked and hourly rate. Create a derived class Manager that adds a bonus to the salary.\n","# Base class Employee\n","class Employee:\n","    def __init__(self, hours_worked, hourly_rate):\n","        self.hours_worked = hours_worked\n","        self.hourly_rate = hourly_rate\n","\n","    def calculate_salary(self):\n","        return self.hours_worked * self.hourly_rate\n","\n","class Manager(Employee):\n","    def __init__(self, hours_worked, hourly_rate, bonus):\n","        super().__init__(hours_worked, hourly_rate)\n","        self.bonus = bonus\n","\n","    def calculate_salary(self):\n","        base_salary = super().calculate_salary()\n","        return base_salary + self.bonus\n","\n","employee1 = Employee(40, 25)\n","print(f\"Employee salary: ${employee1.calculate_salary()}\")\n","\n","manager1 = Manager(40, 30, 500)\n","print(f\"Manager salary: ${manager1.calculate_salary()}\")\n"],"metadata":{"id":"UiSzeeVKYtmR","executionInfo":{"status":"ok","timestamp":1736012217532,"user_tz":-330,"elapsed":461,"user":{"displayName":"","userId":""}},"outputId":"f9a1b84b-9cf2-410e-ed14-9ef0e245f407","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Employee salary: $1000\n","Manager salary: $1700\n"]}]},{"cell_type":"code","source":["#Question15: Create a class Product with attributes name, price, and quantity. Implement a method total_price() that calculates the total price of the product.\n","class Product:\n","    def __init__(self, name, price, quantity):\n","        self.name = name\n","        self.price = price\n","        self.quantity = quantity\n","\n","    def total_price(self):\n","        return self.price * self.quantity\n","\n","product1 = Product(\"Laptop\", 1000, 3)\n","product2 = Product(\"Headphones\", 150, 5)\n","\n","print(f\"Total price of {product1.name}: ${product1.total_price()}\")\n","print(f\"Total price of {product2.name}: ${product2.total_price()}\")\n"],"metadata":{"id":"O_zW4qN0ZEao","executionInfo":{"status":"ok","timestamp":1736012292157,"user_tz":-330,"elapsed":422,"user":{"displayName":"","userId":""}},"outputId":"2a9995d1-bbb7-42d7-de9e-0b14fa4eedf3","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Total price of Laptop: $3000\n","Total price of Headphones: $750\n"]}]},{"cell_type":"code","source":["#Question16:  Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that implement the sound() method.\n","from abc import ABC, abstractmethod\n","\n","class Animal(ABC):\n","    @abstractmethod\n","    def sound(self):\n","        pass\n","\n","class Cow(Animal):\n","    def sound(self):\n","        return \"Moo\"\n","\n","class Sheep(Animal):\n","    def sound(self):\n","        return \"Baa\"\n","\n","cow = Cow()\n","sheep = Sheep()\n","\n","print(f\"Cow makes sound: {cow.sound()}\")\n","print(f\"Sheep makes sound: {sheep.sound()}\")\n"],"metadata":{"id":"D4JrFwSQZbs-","executionInfo":{"status":"ok","timestamp":1736012378931,"user_tz":-330,"elapsed":448,"user":{"displayName":"","userId":""}},"outputId":"b5dcbae5-ffe6-4b2a-dda6-9e64e6011675","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Cow makes sound: Moo\n","Sheep makes sound: Baa\n"]}]},{"cell_type":"code","source":["#Question17: Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that returns a formatted string with the book's details\n","class Book:\n","    def __init__(self, title, author, year_published):\n","        self.title = title\n","        self.author = author\n","        self.year_published = year_published\n","\n","    def get_book_info(self):\n","        return f\"Title: {self.title}\\nAuthor: {self.author}\\nYear Published: {self.year_published}\"\n","\n","book1 = Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925)\n","book2 = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\n","\n","print(book1.get_book_info())\n","\n","print(book2.get_book_info())\n","\n"],"metadata":{"id":"jzm69nSzZw1A","executionInfo":{"status":"ok","timestamp":1736012446974,"user_tz":-330,"elapsed":442,"user":{"displayName":"","userId":""}},"outputId":"c4ff74dc-efb9-4d1a-d059-97225487dfb7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Title: The Great Gatsby\n","Author: F. Scott Fitzgerald\n","Year Published: 1925\n","Title: To Kill a Mockingbird\n","Author: Harper Lee\n","Year Published: 1960\n"]}]},{"cell_type":"code","source":["#Question18: Create a class House with attributes address and price. Create a derived class Mansion that adds an attribute number_of_rooms.\n","# Base class House\n","class House:\n","    def __init__(self, address, price):\n","        self.address = address\n","        self.price = price\n","\n","    def get_info(self):\n","        return f\"Address: {self.address}\\nPrice: ${self.price}\"\n","\n","class Mansion(House):\n","    def __init__(self, address, price, number_of_rooms):\n","        super().__init__(address, price)\n","        self.number_of_rooms = number_of_rooms\n","\n","    def get_info(self):\n","        base_info = super().get_info()\n","        return f\"{base_info}\\nNumber of Rooms: {self.number_of_rooms}\"\n","\n","\n","house1 = House(\"123 Main St\", 250000)\n","mansion1 = Mansion(\"456 Luxury Blvd\", 5000000, 12)\n","\n","print(\"House Info:\")\n","print(house1.get_info())\n","\n","print(\"\\nMansion Info:\")\n","print(mansion1.get_info())\n"],"metadata":{"id":"4i4l76rYaAdW","executionInfo":{"status":"ok","timestamp":1736012529575,"user_tz":-330,"elapsed":403,"user":{"displayName":"","userId":""}},"outputId":"5b0a1a77-2512-469d-e563-f096a6ffc5d0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["House Info:\n","Address: 123 Main St\n","Price: $250000\n","\n","Mansion Info:\n","Address: 456 Luxury Blvd\n","Price: $5000000\n","Number of Rooms: 12\n"]}]}],"metadata":{"colab":{"name":"Welcome to Colaboratory","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1736012550043}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}